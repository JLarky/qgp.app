---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
	</head>
	<body>
		<Header title={SITE_TITLE} />
		<main>
			<h1>Welcome to QGP üëã ‚öõÔ∏è</h1>
			<p class="warning">
				This project is in an extremely alpha state, but we use it to power our product at <a
					href="https://fogbender.com">fogbender.com</a
				>.
			</p>
			<p>
				This website is a small demo of what QGP does and a bit of explanation of why it exists.
			</p>
			<p>
				Everything that you see right now is powered by <a href="https://astro.build/">Astro</a>, it
				includes static generator with a mix of HTML and JSX style templating, blog, integrations
				with tons of hosting providers, image optimization, SSR/SSG, RSS feeds, and more.
			</p>
			<p>
				You can use as little client-side javascript as you want, this counter is powered by a
				simple script tag embedded right into the <code>index.astro</code> template.
			</p>
			<button id="counter">Click me (requires JS)</button>
			<script>
				let count = 0;
				// this is actually typescript code ü§Ø
				const button = document.getElementById('counter')!;
				button.innerText = 'Click me: ' + count;
				button.addEventListener('click', () => {
					count++;
					button.innerText = 'Click me again: ' + count;
				});
			</script>
			<p>
				But you can also use as <a href="https://astro.build/integrations/frameworks/">much</a> client-side
				javascript as you want. For example you could put your whole existing React app (generated with
				<a href="https://create-react-app.dev/">create-react-app</a> for example) into what is called
				"fat island" so it can overtake the routing and you can optionally use SSR/SSG with it.
			</p>
			<p>
				Current limitation of Astro is that it doesn't support HMR (hot module replacement), so it
				reloads the whole page when something changes, a lot of SPA experiences require HMR for a
				good developer experience. To address this QGP template starts a vite powered dev server
				just for your SPA "fat island" so you can use HMR for that part of your app.
			</p>
			<p class="action">
				Action required: to demonstrate HMR you need to edit the file <code
					>src/components/SPA.tsx</code
				> (just changing some text in it will do) and save it. Then compare how pages <a
					href="http://localhost:3000/SPA">http://localhost:3000/SPA</a
				> and <a href="http://localhost:5173/SPA">http://localhost:5173/SPA</a> behave differenlty.
			</p>
		</main>
		<Footer />
		<style>
			.warning {
				background: #f8d7da;
				margin: 0 -1rem 1rem;
				padding: 1rem;
				border-radius: 0.25rem;
			}
			.action {
				background: #d4edda;
				margin: 0 -1rem 1rem;
				padding: 1rem;
				border-radius: 0.25rem;
			}
		</style>
	</body>
</html>
