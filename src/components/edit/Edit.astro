---
import { relative } from 'path';

import pr from './pr.svg';
import edit from './edit.svg';
import github from '../../assets/github.svg';

export type Props = {
	file?: string;
	fileUrl?: string;
	requestUrl?: string;
};
const { file: fileOriginal, fileUrl, requestUrl } = Astro.props;
const file = fileUrl ? fileRelative(fileUrl) : fileOriginal;

function fileRelative(path: string): string {
	const root = import.meta.url.replace('src/components/edit/Edit.astro', '');
	// Convert the file:// URIs to a path format that the path module can understand
	const filePath = new URL(path).pathname;
	const rootPath = new URL(root).pathname;
	// Calculate the relative path
	return relative(rootPath, filePath);
}

function webPublishedUrl(file: string, pathUrl?: string) {
	const search = new URLSearchParams({
		startScript: 'startPublisher',
	});
	if (pathUrl) {
		const path = new URL(pathUrl).pathname;
		search.set('initialPath', path);
	}
	const url = new URL(`https://stackblitz.com/~/github.com/JLarky/qgp.app/edit/main/${file}`);
	url.search = search.toString();
	return url.toString();
}
---

<details>
	<summary>Help us improve this page</summary>
	<a href={`https://github.com/JLarky/qgp.app/edit/main/${file}`}
		><img width="30" height="30" alt="Open in Github" src={github} /></a
	>
	{
		file && (
			<a href={webPublishedUrl(file, requestUrl)}>
				<img alt="Edit in Web Publisher" src={edit} width="161" height="20" />
			</a>
		)
	}
	<a href="https://pr.new/github.com/JLarky/qgp.app/"
		><img alt="Open in Codeflow" src={pr} width="143" height="20" /></a
	>
</details>

<style>
	details {
		min-height: 42px;
		font-size: 14px;
		padding-left: 2rem;
	}
	details summary {
		cursor: pointer;
	}
	img {
		vertical-align: bottom;
	}
</style>
