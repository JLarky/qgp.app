---
import type { CollectionEntry } from 'astro:content';
import Edit from '../components/edit/Edit.astro';

type Props = CollectionEntry<'docs'>['data'] & {
	id: string;
};

const { title, description, pubDate, updatedDate, image, video, id } = Astro.props as Props;

const currentPage = Astro.url.pathname;

function mdOrMdx(id: string) {
	if (id.endsWith('.md')) {
		return '.md';
	} else if (id.endsWith('.mdx')) {
		return '.mdx';
	} else {
		return '';
	}
}
// We need to add the extension to the current page so that we can get the correct file path for the edit button
// This is literally the entire reason for the mdx prop.
// If we can find another way to see if the page is mdx or md, we can remove this prop

const trailingSlashRemover = (currentPage: string) => {
	if (currentPage.endsWith('/')) {
		return currentPage.slice(0, -1);
	} else {
		return currentPage;
	}
};

const pageWithExtension = trailingSlashRemover(currentPage) + mdOrMdx(id);

const contentPage = pageWithExtension.replace('/docs', 'src/content/docs');

// We remove the trailing slash, add the .md or .mdx extension, and then correct the file path to the content folder
---

<article class="max-w-2xl mx-auto p-4 space-y-4 flex flex-col items-center justify-center">
	<h1 class="text-4xl font-bold">{title}</h1>
	{
		video ? (
			<iframe
				src={video}
				title={title}
				allowfullscreen
				class="aspect-w-16 aspect-h-9 rounded-2xl w-full"
			/>
		) : image ? (
			<img
				src={image}
				alt={description}
				class="aspect-w-16 aspect-h-9 max-h-96 w-full rounded-2xl"
			/>
		) : null
	}
	<p>{description}</p>
	<p>Published: {pubDate.toLocaleDateString()}</p>
	<p>Last Updated: {updatedDate?.toLocaleDateString()}</p>
	<div
		class="bg-primary-NOTSODARK p-3 m-2 rounded-2xl bg-opacity-80 flex flex-col items-center justify-center"
	>
		<slot />
	</div>
	<Edit file={`${contentPage}`} />
</article>
